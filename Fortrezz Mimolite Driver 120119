/**
 *  FortrezZ Flow Meter Interface
 *
 *  Copyright 2016 FortrezZ, LLC
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Based on Todd Wackford's MimoLite Garage Door Opener
 *
 *  Version Released by Fortrezz on 7/1/19
 *
 *  Modified for Hubitat by: Kristufer on 12/1/19
 */
 
metadata {
	definition (name: "FortrezZ MIMOlite", namespace: "fortrezz", author: "FortrezZ, LLC") {
		capability "Configuration"
		capability "Switch"
		capability "Refresh"
		capability "Contact Sensor"
        capability "Voltage Measurement"

		attribute "powered", "string"

		command "on"
		command "off"
        
        fingerprint deviceId: "0x1000", inClusters: "0x72,0x86,0x71,0x30,0x31,0x35,0x70,0x85,0x25,0x03"
	}

    preferences {
        input ("version", "text", title: "Plugin Version 1.5", description:"", required: false, displayDuringSetup: true)
       input "RelaySwitchDelay", "decimal", title: "Delay between relay switch on and off in seconds. Only Numbers 0 to 3.0 allowed. 0 value will remove delay and allow relay to function as a standard switch", description: "Numbers 0 to 3.1 allowed.", defaultValue: 0, required: false, displayDuringSetup: true
    }
}

def parse(String description) {

	def result = null
	def cmd = zwave.parse(description, [0x20: 1, 0x84: 1, 0x30: 1, 0x70: 1, 0x31: 5])
    
    if (cmd.CMD == "7105") {
    	log.debug "Device lost power"
    	sendEvent(name: "powered", value: "powerOff", descriptionText: "$device.displayName lost power")
    } else {
    	sendEvent(name: "powered", value: "powerOn", descriptionText: "$device.displayName regained power")
    }

    if (cmd) {
		result = createEvent(zwaveEvent(cmd))
	}
	log.debug "Parse returned ${result?.descriptionText} $cmd.CMD"
    return result
}

def updated() {
	log.debug "Settings Updated..."
    configure()
}

def zwaveEvent(hubitat.zwave.commands.switchbinaryv1.SwitchBinaryReport cmd) {
log.debug "switchBinaryReport ${cmd}"
    if (cmd.value)
    {
		return [name: "switch", value: "on"]
    }
    else
    {
		return [name: "switch", value: "off"]
    }
       
}

def zwaveEvent(hubitat.zwave.commands.basicv1.BasicSet cmd)
{
	log.debug "sent a BasicSet command"
    delayBetween([zwave.sensorMultilevelV5.sensorMultilevelGet().format()])
	[name: "contact", value: cmd.value ? "open" : "closed"]}
    
def zwaveEvent(hubitat.zwave.commands.sensorbinaryv1.SensorBinaryReport cmd)
{
	log.debug "sent a sensorBinaryReport command"
}
    
def zwaveEvent (hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelReport cmd)
{
	log.debug "sent a SensorMultilevelReport"
	def ADCvalue = cmd.scaledSensorValue
    sendEvent(name: "voltageCounts", value: ADCvalue)
   
    CalculateVoltage(cmd.scaledSensorValue)
}

def zwaveEvent(hubitat.zwave.Command cmd) {
     log.debug("Un-parsed Z-Wave message ${cmd}")
	[:]
}

def CalculateVoltage(ADCvalue)
{
	 def map = [:]
     
     def volt = (((1.5338*(10**-16))*(ADCvalue**5)) - ((1.2630*(10**-12))*(ADCvalue**4)) + ((3.8111*(10**-9))*(ADCvalue**3)) - ((4.7739*(10**-6))*(ADCvalue**2)) + ((2.8558*(10**-3))*(ADCvalue)) - (2.2721*(10**-2)))

	def voltResult = volt.round(1)// + "v"
    
	map.name = "voltage"
    map.value = voltResult
    map.unit = "v"
    return map
}
	

def configure() {
	 def x = 0;
	if (RelaySwitchDelay != null) {x = (RelaySwitchDelay*10).toInteger()}
    log.debug "Configuring.... "

    delayBetween([
		zwave.associationV1.associationSet(groupingIdentifier:3, nodeId:[zwaveHubNodeId]).format(),
        zwave.associationV1.associationSet(groupingIdentifier:2, nodeId:[zwaveHubNodeId]).format(),
        zwave.associationV1.associationSet(groupingIdentifier:4, nodeId:[zwaveHubNodeId]).format(),
        zwave.configurationV1.configurationSet(configurationValue: [x], parameterNumber: 11, size: 1).format()
	])
}

def on() { delayBetween([zwave.basicV1.basicGet().format(),zwave.basicV1.basicSet(value: 0xFF).format(),],1000) }

def off() { delayBetween([zwave.basicV1.basicGet().format(),zwave.basicV1.basicSet(value: 0x00).format(),],1000) }

def refresh() {
	log.debug "Refreshing"
	delayBetween([zwave.switchBinaryV1.switchBinaryGet().format(), zwave.basicV1.basicGet().format(),],1000)
}